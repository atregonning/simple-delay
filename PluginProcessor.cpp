/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"

class FloatParameter : public AudioProcessorParameter
{
public:
    
    FloatParameter (float defaultParameterValue, const String& paramName)
    :  defaultValue (defaultParameterValue),
       value (defaultParameterValue),
       name (paramName)
    {
    }
    
    float getValue() const override
    {
        return value;
    }
    
    void setValue (float newValue) override
    {
        value = newValue;
    }
    
    float getDefaultValue() const override
    {
        return defaultValue;
    }
    
    String getName (int /* maximumStringLength */) const override
    {
        return name;
    }
    
    String getLabel() const override
    {
        return String();
    }
    
    float getValueForText (const String& text) const override
    {
        return text.getFloatValue();
    }
    
private:
    float defaultValue, value;
    String name;
};

const float maxDelayMS = 2000.0f;
const float defaultDelayMS = 100.0f;
const float defaultFeedback = 0.2f;
const float defaultWetDry = 0.5f;
//const bool  defaultType = true;

//==============================================================================
SimpleDelayAudioProcessor::SimpleDelayAudioProcessor()
{
    delayPosition = 0;
    
    lastUIWidth = defaultUIWidth;
    lastUIHeight = defaultUIHeight;
    
    addParameter (feedback  = new FloatParameter (defaultFeedback,  "feedback"));
    addParameter (delay = new FloatParameter (defaultDelayMS, "delay"));
    addParameter (wetDry = new FloatParameter (defaultWetDry, "wetDry"));
}

SimpleDelayAudioProcessor::~SimpleDelayAudioProcessor()
{
}

//==============================================================================
const String SimpleDelayAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

const String SimpleDelayAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String SimpleDelayAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool SimpleDelayAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool SimpleDelayAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool SimpleDelayAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool SimpleDelayAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool SimpleDelayAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double SimpleDelayAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int SimpleDelayAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int SimpleDelayAudioProcessor::getCurrentProgram()
{
    return 0;
}

void SimpleDelayAudioProcessor::setCurrentProgram (int index)
{
}

const String SimpleDelayAudioProcessor::getProgramName (int index)
{
    return String();
}

void SimpleDelayAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void SimpleDelayAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    maxDelay = (maxDelayMS / 1000) * getSampleRate();
    delayBuffer.setSize (2, (int) maxDelay, false, true, true);
    delayBuffer.clear();
}

void SimpleDelayAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void SimpleDelayAudioProcessor::reset()
{
    delayBuffer.clear();
}

void SimpleDelayAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    const int numSamples = buffer.getNumSamples();
    int dWp = 0;
    double wdMix = wetDry->getValue();
    fullDelay = (delay->getValue() / 1000) * getSampleRate();
    fracDelay = fullDelay - (int) fullDelay;
    
//    std::cout << "Max delay = " << maxDelay << "\n";
//    std::cout << "Delay = " << fullDelay << "\n";
//    std::cout << "fd = " << fracDelay << "\n";

    for (int channel = 0; channel < getNumInputChannels(); ++channel)
    {
        float* channelData = buffer.getWritePointer (channel);
        float* delayData = delayBuffer.getWritePointer (jmin (channel, delayBuffer.getNumChannels() - 1));
        
        dWp = delayPosition;
        int dRp = (dWp + (int) fullDelay) % delayBuffer.getNumSamples();
        
        for (int i = 0; i < numSamples; ++i)
        {
            const float in = channelData[i];
            channelData[i] = ((1 - wdMix) * delayData[dWp])
                             + (wdMix * ((1 - fracDelay) * delayData[dRp]
                             + (fracDelay * delayData[dRp + 1])));
            delayData[dWp] = ((delayData[dRp] * feedback->getValue()) + in);
            if (++dWp >= delayBuffer.getNumSamples())
            {
                dWp = 0;
            }
            if (++dRp >= delayBuffer.getNumSamples() - 1)
            {
                dRp = 0;
            }
        }
    }
    delayPosition = dWp;
    
    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
    {
        buffer.clear (i, 0, buffer.getNumSamples());
    }
}

//==============================================================================
bool SimpleDelayAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* SimpleDelayAudioProcessor::createEditor()
{
    return new SimpleDelayAudioProcessorEditor (*this);
}

//==============================================================================
void SimpleDelayAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void SimpleDelayAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new SimpleDelayAudioProcessor();
}
