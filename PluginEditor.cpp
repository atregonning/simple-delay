/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
SimpleDelayAudioProcessorEditor::SimpleDelayAudioProcessorEditor (SimpleDelayAudioProcessor& p)
    :   AudioProcessorEditor (&p),
        delaySlider ("delay"),
        fbSlider ("fFeedback"),
        wdMixSlider ("wetDry"),
        typeButton ("delayType"),
        delayLabel ("", "Delay time (ms)"),
        fbLabel ("", "Feedback"),
        wdMixLabel ("", "Dry/Wet"),
        typeLabel ("BPM/ms")
{
    // Angle definitions for rotary knob ranges
    const float PI = 3.141592653589793238463;
    const float MIN_ANG = 10 * PI / 9;
    const float MAX_ANG = 26 * PI / 9;
    
    // Sliders and buttons
    delaySlider.setSliderStyle (Slider::RotaryVerticalDrag);
    delaySlider.setRotaryParameters (MIN_ANG, MAX_ANG, true);
    delaySlider.setRange (0.0, 1000, 1);
    delaySlider.setTextBoxStyle (Slider::TextBoxBelow, false, 90, 50);
    delaySlider.setTextValueSuffix(" ms");
    delaySlider.setValue (getProcessor().delay->getValue());
    addAndMakeVisible (&delaySlider);
    delaySlider.addListener (this);
    
    fbSlider.setSliderStyle (Slider::RotaryVerticalDrag);
    fbSlider.setRotaryParameters (MIN_ANG, MAX_ANG, true);
    fbSlider.setRange (0, 1.0, 0.01);
    fbSlider.setTextBoxStyle (Slider::TextBoxBelow, false, 90, 50);
    fbSlider.setValue (getProcessor().feedback->getValue());
    addAndMakeVisible (&fbSlider);
    fbSlider.addListener (this);
    
    wdMixSlider.setSliderStyle (Slider::RotaryVerticalDrag);
    wdMixSlider.setRotaryParameters (MIN_ANG, MAX_ANG, true);
    wdMixSlider.setRange (0, 1.0, 0.01);
    wdMixSlider.setTextBoxStyle (Slider::TextBoxBelow, false, 90, 50);
    wdMixSlider.setValue (getProcessor().wetDry->getValue());
    addAndMakeVisible (&wdMixSlider);
    wdMixSlider.addListener(this);
    
    typeButton.setButtonText("BPM mode");
    addAndMakeVisible(&typeButton);
    typeButton.addListener(this);
    
    // Add labels to UI components
    delayLabel.attachToComponent (&delaySlider, false);
    delayLabel.setFont (Font (11.0f));
    delayLabel.setJustificationType(Justification::centred);
    fbLabel.attachToComponent (&fbSlider, false);
    fbLabel.setFont (Font (11.0f));
    fbLabel.setJustificationType(Justification::centred);
    wdMixLabel.attachToComponent (&wdMixSlider, false);
    wdMixLabel.setFont (Font (11.0f));
    wdMixLabel.setJustificationType(Justification::centred);
    typeLabel.attachToComponent(&typeButton, false);
    
    // Add resizer component
    addAndMakeVisible (resizer = new ResizableCornerComponent (this, &resizeLimits));
    resizeLimits.setSizeLimits (p.defaultUIWidth, p.defaultUIHeight, 800, 400);
    
    setSize (p.lastUIWidth, p.lastUIHeight);
}

SimpleDelayAudioProcessorEditor::~SimpleDelayAudioProcessorEditor()
{
}

//==============================================================================
void SimpleDelayAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::white);

    g.setColour (Colours::black);
    g.setFont (15.0f);
    g.drawFittedText ("Simple Delay", getLocalBounds(), Justification::centredTop, 1);
}

void SimpleDelayAudioProcessorEditor::resized()
{
    int size = 80;
    int gap = (int) (getWidth() - size * 3)/ 4;
    int x = getWidth();
    int y = getHeight();
    
    // sets the position and size of the components (arguments = x, y, width, height)
    delaySlider.setBounds (gap, 60, size, y - 100);
    fbSlider.setBounds (size + (gap * 2), 60, size, y - 100);
    wdMixSlider.setBounds ((size * 2) + (gap * 3), 60, size, y - 100);
    typeButton.setBounds(10, (y / 2) - 25, 50, 50);
    
    resizer->setBounds (x - 16, y - 16, 16, 16);
    
    getProcessor().lastUIWidth = x;
    getProcessor().lastUIHeight = y;
}


AudioProcessorParameter* SimpleDelayAudioProcessorEditor::getParameterFromSlider (const Slider* slider) const
{
    if (slider == &delaySlider)
        return getProcessor().delay;
    
    if (slider == &fbSlider)
        return getProcessor().feedback;
    
    if (slider ==&wdMixSlider)
        return getProcessor().wetDry;
    
    return nullptr;
}

void SimpleDelayAudioProcessorEditor::sliderValueChanged (Slider* slider)
{
    if (AudioProcessorParameter* param = getParameterFromSlider (slider))
    {
        param->setValueNotifyingHost ((float) slider->getValue());
    }
}

void SimpleDelayAudioProcessorEditor::sliderDragStarted (Slider* slider)
{
    if (AudioProcessorParameter* param = getParameterFromSlider (slider))
    {
        param->beginChangeGesture();
    }
}

void SimpleDelayAudioProcessorEditor::sliderDragEnded (Slider* slider)
{
    if (AudioProcessorParameter* param = getParameterFromSlider (slider))
    {
        param->endChangeGesture();
    }
}

void SimpleDelayAudioProcessorEditor::buttonClicked(Button* button)
{
    std::cout << "Clicked!\n";
}